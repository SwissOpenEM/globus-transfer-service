// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	ScicatKeyAuthScopes = "ScicatKeyAuth.Scopes"
)

// FileToTransfer the file to transfer as part of a transfer request
type FileToTransfer struct {
	// IsSymlink specifies whether this file is a symlink
	IsSymlink bool `json:"isSymlink"`

	// Path the path of the file, it has to be relative to the dataset source folder
	Path string `json:"path"`
}

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

// PostTransferTaskJSONBody defines parameters for PostTransferTask.
type PostTransferTaskJSONBody struct {
	FileList *[]FileToTransfer `json:"fileList,omitempty"`
}

// PostTransferTaskParams defines parameters for PostTransferTask.
type PostTransferTaskParams struct {
	// SourceFacility the identifier name of the source facility
	SourceFacility string `form:"sourceFacility" json:"sourceFacility"`

	// DestFacility the path in the destination collection to use for the transfer
	DestFacility string `form:"destFacility" json:"destFacility"`

	// ScicatPid the pid of the dataset being transferred
	ScicatPid string `form:"scicatPid" json:"scicatPid"`
}

// DeleteTransferTaskParams defines parameters for DeleteTransferTask.
type DeleteTransferTaskParams struct {
	// Delete Enables/disables deleting from scicat job system. By default, it's disabled (false).
	Delete *bool `form:"delete,omitempty" json:"delete,omitempty"`
}

// PostTransferTaskJSONRequestBody defines body for PostTransferTask for application/json ContentType.
type PostTransferTaskJSONRequestBody PostTransferTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// request a transfer task
	// (POST /transfer)
	PostTransferTask(c *gin.Context, params PostTransferTaskParams)
	// cancels and/or deletes transfer entry
	// (DELETE /transfer/{scicatJobId})
	DeleteTransferTask(c *gin.Context, scicatJobId string, params DeleteTransferTaskParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostTransferTask operation middleware
func (siw *ServerInterfaceWrapper) PostTransferTask(c *gin.Context) {

	var err error

	c.Set(ScicatKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTransferTaskParams

	// ------------- Required query parameter "sourceFacility" -------------

	if paramValue := c.Query("sourceFacility"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument sourceFacility is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sourceFacility", c.Request.URL.Query(), &params.SourceFacility)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sourceFacility: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "destFacility" -------------

	if paramValue := c.Query("destFacility"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument destFacility is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "destFacility", c.Request.URL.Query(), &params.DestFacility)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter destFacility: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scicatPid" -------------

	if paramValue := c.Query("scicatPid"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scicatPid is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scicatPid", c.Request.URL.Query(), &params.ScicatPid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scicatPid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTransferTask(c, params)
}

// DeleteTransferTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransferTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "scicatJobId" -------------
	var scicatJobId string

	err = runtime.BindStyledParameterWithOptions("simple", "scicatJobId", c.Param("scicatJobId"), &scicatJobId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scicatJobId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ScicatKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTransferTaskParams

	// ------------- Optional query parameter "delete" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete", c.Request.URL.Query(), &params.Delete)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter delete: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTransferTask(c, scicatJobId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/transfer", wrapper.PostTransferTask)
	router.DELETE(options.BaseURL+"/transfer/:scicatJobId", wrapper.DeleteTransferTask)
}

type GeneralErrorResponseJSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

type PostTransferTaskRequestObject struct {
	Params PostTransferTaskParams
	Body   *PostTransferTaskJSONRequestBody
}

type PostTransferTaskResponseObject interface {
	VisitPostTransferTaskResponse(w http.ResponseWriter) error
}

type PostTransferTask200JSONResponse struct {
	// JobId the SciCat job id of the transfer job
	JobId string `json:"jobId"`
}

func (response PostTransferTask200JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask400JSONResponse struct {
	GeneralErrorResponseJSONResponse
}

func (response PostTransferTask400JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask401JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask401JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask403JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask403JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask500JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask500JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask503JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask503JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransferTaskRequestObject struct {
	ScicatJobId string `json:"scicatJobId"`
	Params      DeleteTransferTaskParams
}

type DeleteTransferTaskResponseObject interface {
	VisitDeleteTransferTaskResponse(w http.ResponseWriter) error
}

type DeleteTransferTask200Response struct {
}

func (response DeleteTransferTask200Response) VisitDeleteTransferTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteTransferTask400JSONResponse struct {
	GeneralErrorResponseJSONResponse
}

func (response DeleteTransferTask400JSONResponse) VisitDeleteTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransferTask401JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response DeleteTransferTask401JSONResponse) VisitDeleteTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransferTask403JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response DeleteTransferTask403JSONResponse) VisitDeleteTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransferTask500JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response DeleteTransferTask500JSONResponse) VisitDeleteTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// request a transfer task
	// (POST /transfer)
	PostTransferTask(ctx context.Context, request PostTransferTaskRequestObject) (PostTransferTaskResponseObject, error)
	// cancels and/or deletes transfer entry
	// (DELETE /transfer/{scicatJobId})
	DeleteTransferTask(ctx context.Context, request DeleteTransferTaskRequestObject) (DeleteTransferTaskResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostTransferTask operation middleware
func (sh *strictHandler) PostTransferTask(ctx *gin.Context, params PostTransferTaskParams) {
	var request PostTransferTaskRequestObject

	request.Params = params

	var body PostTransferTaskJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransferTask(ctx, request.(PostTransferTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransferTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTransferTaskResponseObject); ok {
		if err := validResponse.VisitPostTransferTaskResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTransferTask operation middleware
func (sh *strictHandler) DeleteTransferTask(ctx *gin.Context, scicatJobId string, params DeleteTransferTaskParams) {
	var request DeleteTransferTaskRequestObject

	request.ScicatJobId = scicatJobId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransferTask(ctx, request.(DeleteTransferTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransferTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTransferTaskResponseObject); ok {
		if err := validResponse.VisitDeleteTransferTaskResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTY/bOA/+K4TeF+gukCbT7faSW7v9QLYL7KDT2yAHRaZjzciSK9IzMAb57wtKdpwP",
	"T79mb3tTFJHi8/AhKT8oE+omePRMavmgIlITPGH68QE9Ru3exRjip/4P2TfBM3qWpW4aZ41mG/zihoKX",
	"PTIV1lpWTQwNRrbZXYGsreuXZKJtxEwtVdlGrjBCf2AGBW7a7db6LVhfhlgn/2qmuGtQLRVxtH6rdjNV",
	"I5He4rlLrhBQ4obhyJn1br8TNjdoWO1k69iNhm3moHc20JOsM86E5711+Dl8jtpTiXE6nNI6BA7A/SnQ",
	"BI2ODKEEPe5G/NIisZqdsGfpqqud9bfn3qlBY0uLBPcVJia5spQvtAQaqLfcI96E4FB7obDRXE0HLP9I",
	"cEPwM7AMlSYBsUGI6DTbu4ypQig0a0IGCm00CGVwBcZJ2gWijVio5XW+fnaAbn2elpkiNG203F0J5ZmP",
	"KyO6+4jd6zYDsBJ3hTrf6nUtPq6M/UPz89eXq+cfsRuj0Y2V3ynlorFzBj4hMby+XEEZYsL3wYVNSzAk",
	"Ga4w3lmDc1gxtIQEOSLgcIuekpluuULPfYHM5XrLTu5/xJlcqGbqDiPlKF7ML+YXkqbQoNeNVUv1cn4x",
	"f6ly4hITCz7QXROIz8GsGLRz4T6H1UtM6msvO9Z0S6C32npi0JCJy2BGiMID9aFqY0LrGUzwpd22EQu4",
	"t1wdnnlGIO60N1J/ouZExKpQS3UZiAf4nzXdJkRR18gYSS2vpxRpC2GztBhB8juIc1CcNtZZliwnLXxp",
	"MXajFPKp9+OhUYYcW5wd9K2T9tSbiNBbQqnb7GtK3I8WkvW5ShLxiQYwwTk0adm7HrS2z+g0FHHy7wA5",
	"COe70dhiIH4o+Q0eakkieSQFqUIubfEDQcs9vRgvV2+/5+ZTFOt8GRK/CUX3hAEmTfAvm+vLMtZp8/8R",
	"S7VU/1uMg3TRT4bFyVgYJ46OUXePjaBjZtLGwVD+7eLiCRBuwkaq7ysk34QNjBne94ebsPlmL8/O1xNz",
	"lFpjkKhsneuAWEfG4nDoSfcRen7P4KY43ZOwmHyWJOMXTzF++fPGr54S9qufv1kmY1vXOnZqOWj8jNaZ",
	"Yr2Vjqr2XWUtlvuxsXjIdfmnpG+XxeGQJ15V/QwRYbQk/gMYae7u8FLti0WQx5z4SGdFUmUMdW7WeUrK",
	"HnXEWJ9NhrfJ8kdmgw9ciSD7rtO/KY6aTgL31bbzzeb3zuuNQ1oUltIiQ5T+k8CdAZvDmw4KLHXrWN5O",
	"zwh60wJ+KbUj/HX+aINPCZgIb/9yy23tvDEcx5xDDB7uNYHRMVosILQMhxX536y8o+LJMqZj8dIoavSc",
	"8jNVSgfv06TNk5fp9VpS1Rue5ufvQfmU39NYSFEdvxtHWci+OhfmtBMZkXsANDrhcRydOnrff4iF0aG8",
	"SIZvoOOPsd5dEAu1W+/+CQAA//+vS5RuSw4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
