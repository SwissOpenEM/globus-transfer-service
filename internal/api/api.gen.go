// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	ScicatKeyAuthScopes = "ScicatKeyAuth.Scopes"
)

// FileToTransfer the file to transfer as part of a transfer request
type FileToTransfer struct {
	// IsSymlink specifies whether this file is a symlink
	IsSymlink bool `json:"isSymlink"`

	// Path the path of the file, it has to be relative to the dataset source folder
	Path string `json:"path"`
}

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

// PostTransferTaskJSONBody defines parameters for PostTransferTask.
type PostTransferTaskJSONBody struct {
	FileList *[]FileToTransfer `json:"fileList,omitempty"`
}

// PostTransferTaskParams defines parameters for PostTransferTask.
type PostTransferTaskParams struct {
	// SourceFacility the identifier name of the source facility
	SourceFacility string `form:"sourceFacility" json:"sourceFacility"`

	// DestFacility the path in the destination collection to use for the transfer
	DestFacility string `form:"destFacility" json:"destFacility"`

	// ScicatPid the pid of the dataset being transferred
	ScicatPid string `form:"scicatPid" json:"scicatPid"`
}

// PostTransferTaskJSONRequestBody defines body for PostTransferTask for application/json ContentType.
type PostTransferTaskJSONRequestBody PostTransferTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// request a transfer task
	// (POST /transfer)
	PostTransferTask(c *gin.Context, params PostTransferTaskParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostTransferTask operation middleware
func (siw *ServerInterfaceWrapper) PostTransferTask(c *gin.Context) {

	var err error

	c.Set(ScicatKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTransferTaskParams

	// ------------- Required query parameter "sourceFacility" -------------

	if paramValue := c.Query("sourceFacility"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument sourceFacility is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sourceFacility", c.Request.URL.Query(), &params.SourceFacility)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sourceFacility: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "destFacility" -------------

	if paramValue := c.Query("destFacility"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument destFacility is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "destFacility", c.Request.URL.Query(), &params.DestFacility)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter destFacility: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scicatPid" -------------

	if paramValue := c.Query("scicatPid"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scicatPid is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scicatPid", c.Request.URL.Query(), &params.ScicatPid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scicatPid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTransferTask(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/transfer", wrapper.PostTransferTask)
}

type GeneralErrorResponseJSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

type PostTransferTaskRequestObject struct {
	Params PostTransferTaskParams
	Body   *PostTransferTaskJSONRequestBody
}

type PostTransferTaskResponseObject interface {
	VisitPostTransferTaskResponse(w http.ResponseWriter) error
}

type PostTransferTask200JSONResponse struct {
	// JobId the SciCat job id of the transfer job
	JobId *string `json:"jobId,omitempty"`
}

func (response PostTransferTask200JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask400JSONResponse struct {
	GeneralErrorResponseJSONResponse
}

func (response PostTransferTask400JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask401JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask401JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask403JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask403JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask500JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask500JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTransferTask503JSONResponse struct {
	// Details further details, debugging information
	Details *string `json:"details,omitempty"`

	// Message the error message
	Message *string `json:"message,omitempty"`
}

func (response PostTransferTask503JSONResponse) VisitPostTransferTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// request a transfer task
	// (POST /transfer)
	PostTransferTask(ctx context.Context, request PostTransferTaskRequestObject) (PostTransferTaskResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostTransferTask operation middleware
func (sh *strictHandler) PostTransferTask(ctx *gin.Context, params PostTransferTaskParams) {
	var request PostTransferTaskRequestObject

	request.Params = params

	var body PostTransferTaskJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransferTask(ctx, request.(PostTransferTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransferTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostTransferTaskResponseObject); ok {
		if err := validResponse.VisitPostTransferTaskResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTY/bNhD9KwO2QC+K7XSbi2/bjw2MFKgR723hA02NLHolUuGMdiEE/u/FkJLltbVF",
	"ms1Npjkf782bGX5VxteNd+iY1PKrCkiNd4Txx0d0GHT1Vwg+fO7/kHPjHaNj+dRNU1mj2Xo3P5B3ckam",
	"xFrLVxN8g4Ftcpcja1v1n2SCbcRMLVXRBi4xQH8hgxx37X5v3R6sK3yoo3+VKe4aVEtFHKzbq2OmaiTS",
	"e7x2ySUCSt4wXLmyPp5O/O6AhtVRjl660bBPHPTOIj3kMFonnBHPna3w3t8H7ajAMJ1OYSsE9sD9LdAE",
	"jQ4MvgA9ngb80iKxyi7Ys7Tp6sq6x2vv1KCxhUWC5xIjk1xaSgEtgQbqLU+Id95XqJ1Q2GgupxOWfyS5",
	"IfkMLEOpSUDsEAJWmu1TwlQi5Jo1IQP5NhiEwlc5hknaBaINmKvlQwqfnaHbXpclU4SmDZa7jVCe+NgY",
	"0d0n7G7bBMBK3iXqFNXpWnxsjP1D87vb9erdJ+zGbHRj5XcsuWjsmoHPSAy36xUUPkR8Hyu/awmGIsMG",
	"w5M1OIMVQ0tIkDIC9o/oKJrplkt03DfITMJbriT+K84koMrUEwZKWbyfLWYLKZNv0OnGqqW6mS1mNyoV",
	"LjIx5zPdNZ74GsyKQVeVf05p9RKT/jrJjjU9Eui9to4YNCTiEpgRovBAfaraGN86BuNdYfdtwByeLZfn",
	"d34hEHfaGek/UXMkYpWrpVp74gH+vabHiCjoGhkDqeXDlCJtLmwWFgNIfQdxDorTxlaWpcpRC19aDN0o",
	"hXTrbrw0ypBDi9nZ3LoYT72JCL0llL5NvqbE/WojWZe6JBIfaQDjqwpN/OxdD1o7VXQaijj5MUDO0vlm",
	"NDYfiB9afofnWpJMXilB7JC1zf9H0hKnF+N69ee3RL5EsU3BkPh3n3dvWGAyBP+2qb8sYx0Pfw5YqKX6",
	"aT4u0nm/GeYXa2HcODoE3U2voDgfz5bwr4vFG1I++J1023+QevA7GCt6mgcHv5ugcmJFUmsMEhVtVXVA",
	"rANjfr7PZLAI8t8Sjim6Tnjnky+OaPz+LcY332/84S1pf/j+yLL02rrWoVPLQb5XtGaK9V6GpToNjO3x",
	"fF/GOXqxKR+20hG94aUw/hlmNKX9jrkMi5d7bOxnOVfXU2LaibTsKX8anfDYHpeO7vqHoR8dyoQc3mQv",
	"H4e9Oy8W6rg9/hsAAP//Q3H6ztsKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
